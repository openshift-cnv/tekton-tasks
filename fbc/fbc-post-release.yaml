---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: fbc-post-release
spec:
  description: WIP
  params:
    - name: snapshot
      type: string
    - name: cnv_version
      type: string
    - name: releaseplan_id
      type: string
  tasks:
    - name: get-info
      params:
        - name: SNAPSHOT
          value: "$(params.snapshot)"
        - name: CNV_VERSION
          value: "$(params.cnv_version)"
        - name: RELEASEPLAN_ID
          value: "$(params.releaseplan_id)"
      taskSpec:
        params:
          - name: SNAPSHOT
            type: string
          - name: CNV_VERSION
            type: string
          - name: RELEASEPLAN_ID
            type: string
        steps:
          - name: get-info
            image: quay.io/konflux-ci/release-service-utils:cd12f6a509363ae511bf09d50be73d5edb416cdd
            envFrom:
              - secretRef:
                  name: cnv-ci-release-token
            script: |
              #!/usr/bin/env bash
              set -eo pipefail

              snapshot_id=$(echo "$(params.SNAPSHOT)" | awk -F'/' '{print $2}')
              snapshot_data=$(kubectl get snapshot "${snapshot_id}" -oyaml)

              fbc_fragment=$(echo "${snapshot_data}" | yq '.spec.components[0].containerImage')

              release_id=$(kubectl get release --sort-by=.metadata.creationTimestamp -o json | \
              jq -r --arg snapshot "${snapshot_id}" --arg releaseplan "$(params.RELEASEPLAN_ID)" \
              '.items[] | select(.spec.snapshot == $snapshot and .spec.releasePlan == $releaseplan) | .metadata.name' | tail -n 1)
              index_image=$(kubectl get release "${release_id}" -oyaml | yq '.status.artifacts.index_image.index_image')
              from_index="registry-proxy.engineering.redhat.com/rh-osbs/iib-pub-pending:$(params.CNV_VERSION)"

              git_commit=$(echo "${snapshot_data}" | yq '.spec.components[0].source.git.revision')
              git_repo=$(echo "${snapshot_data}" | yq '.spec.components[0].source.git.url')
              gitfbcdir=$(mktemp -d) && cd "${gitfbcdir}"
              git init
              git remote add origin "${git_repo}.git"
              git fetch origin "${git_commit}" --depth 1
              git checkout "${git_commit}"
              image_sha=$(yq '.image' $(params.CNV_VERSION)/updated_image.yaml)
              channel=$(yq '.channel' $(params.CNV_VERSION)/updated_image.yaml)
              hco_bundle_version=$(yq '.hco-bundle-version' $(params.CNV_VERSION)/updated_image.yaml)

              gitpayloaddir=$(mktemp -d) && cd "${gitpayloaddir}"
              git clone https://${github_token}@github.com/openshift-cnv/cnv-fbc-payloads.git && cd cnv-fbc-payloads
              git config --global user.name "${github_username}"
              git config --global user.email "no-reply@redhat.com"

              mkdir "$(params.CNV_VERSION)"
              touch "$(params.CNV_VERSION)/payload.yaml"
              yq e '.index_image = ${index_image}' -i $(params.CNV_VERSION)/payload.yml
              yq e '.from_index = ${from_index}' -i $(params.CNV_VERSION)/payload.yml
              yq e '.fbc_fragment = ${fbc_fragment}' -i $(params.CNV_VERSION)/payload.yml
              yq e '.image_sha = ${image_sha}' -i $(params.CNV_VERSION)/payload.yml
              yq e '.channel = ${channel}' -i $(params.CNV_VERSION)/payload.yml
              yq e '.hco_bundle_version = ${hco_bundle_version}' -i $(params.CNV_VERSION)/payload.yml

              git add .
              git commit -m "Update payload"
              git push origin main
